import{_ as n,c as s,o as a,a as t}from"./app.a3c81315.js";const g='{"title":"AST","description":"","frontmatter":{},"headers":[{"level":2,"title":"\u7F16\u8BD1\u6D41\u7A0B","slug":"\u7F16\u8BD1\u6D41\u7A0B"},{"level":2,"title":"AST\u5E94\u7528\u573A\u666F","slug":"ast\u5E94\u7528\u573A\u666F"},{"level":2,"title":"AST\u64CD\u4F5C\u5E93","slug":"ast\u64CD\u4F5C\u5E93"},{"level":3,"title":"\u89E3\u6790","slug":"\u89E3\u6790"},{"level":3,"title":"\u751F\u6210","slug":"\u751F\u6210"},{"level":3,"title":"\u8F6C\u6362","slug":"\u8F6C\u6362"},{"level":3,"title":"\u8F6C\u6362\u51FD\u6570\u4F7F\u7528\u6CE8\u610F\u70B9","slug":"\u8F6C\u6362\u51FD\u6570\u4F7F\u7528\u6CE8\u610F\u70B9"},{"level":3,"title":"AST\u5BF9\u6BD4\u5DE5\u5177","slug":"ast\u5BF9\u6BD4\u5DE5\u5177"},{"level":2,"title":"recast","slug":"recast"}],"relativePath":"\u524D\u7AEF/\u524D\u7AEF\u5DE5\u7A0B\u5316/\u5DE5\u5177/babel/AST\u521D\u63A2.md"}',p={},o=t(`<h1 id="ast" tabindex="-1">AST <a class="header-anchor" href="#ast" aria-hidden="true">#</a></h1><p>AST\u5168\u79F0<strong>\u62BD\u8C61\u8BED\u6CD5\u6811</strong>\uFF0C<code>AST</code>\u6574\u4F53\u5185\u5BB9\u5F52\u5C5E\u4E8E<strong>\u7F16\u8BD1\u539F\u7406</strong></p><h2 id="\u7F16\u8BD1\u6D41\u7A0B" tabindex="-1">\u7F16\u8BD1\u6D41\u7A0B <a class="header-anchor" href="#\u7F16\u8BD1\u6D41\u7A0B" aria-hidden="true">#</a></h2><ol><li><p><code>code</code> \u89E3\u6790\u6210 <code>AST</code> \u5C5E\u4E8E<code>parse</code>\u9636\u6BB5</p></li><li><p>\u4FEE\u6539 <code>AST</code></p></li><li><p><code>AST</code> \u751F\u6210 <code>code</code> \u5C5E\u4E8E<code>generator</code>\u9636\u6BB5</p></li></ol><p>\u4E00\u822C\u800C\u8A00\uFF0C\u7F16\u8BD1\u539F\u7406\u8981\u505A\u7684\u57FA\u672C\u4E5F\u662F\u4E0A\u97623\u6B65\uFF0C\u4E0D\u8FC7\u5BF9\u4E8E\u4E00\u822C\u573A\u666F\u6765\u8BF4\uFF0C<strong><code>parse</code>\u548C<code>generator</code>\u6211\u4EEC\u4E0D\u9700\u8981\u5173\u6CE8</strong>\uFF0C\u5E93\u4F1A\u5E2E\u6211\u4EEC\u5904\u7406\uFF0C<strong>\u6211\u4EEC\u9700\u8981\u5173\u6CE8\u7684\u662F\uFF0C\u5982\u4F55\u5C06AST\u8F6C\u6362\u6210\u6211\u4EEC\u60F3\u8981\u7684AST</strong></p><h2 id="ast\u5E94\u7528\u573A\u666F" tabindex="-1">AST\u5E94\u7528\u573A\u666F <a class="header-anchor" href="#ast\u5E94\u7528\u573A\u666F" aria-hidden="true">#</a></h2><ul><li><p>\u9884\u7F16\u8BD1\u8BED\u8A00<code>sass</code>\u3001<code>jsx</code>\u3001<code>es6+</code>\u3001<code>TypeScript</code></p></li><li><p><code>lint</code>\u548C<code>formate</code></p></li></ul><p>\u53EF\u4EE5\u8BF4\u57FA\u672C\u524D\u7AEF\u76EE\u524D\u7EDD\u5927\u6570\u5DE5\u5177\u90FD\u79BB\u4E0D\u5F00<code>AST</code>\uFF0C\u53EF\u89C1<code>AST</code>\u7684\u91CD\u8981\u6027</p><h2 id="ast\u64CD\u4F5C\u5E93" tabindex="-1">AST\u64CD\u4F5C\u5E93 <a class="header-anchor" href="#ast\u64CD\u4F5C\u5E93" aria-hidden="true">#</a></h2><p>\u672C\u6B21\u57FA\u4E8Ebabel\u4F7F\u7528\u7684\u7F16\u8BD1\u5668</p><h3 id="\u89E3\u6790" tabindex="-1">\u89E3\u6790 <a class="header-anchor" href="#\u89E3\u6790" aria-hidden="true">#</a></h3><div class="language-js"><pre><code><span class="token keyword">let</span> <span class="token punctuation">{</span> parse <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;@babel/parser&quot;</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> code <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">let a = 1</span><span class="token template-punctuation string">\`</span></span>

<span class="token keyword">const</span> ast <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ast<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="\u751F\u6210" tabindex="-1">\u751F\u6210 <a class="header-anchor" href="#\u751F\u6210" aria-hidden="true">#</a></h3><div class="language-js"><pre><code><span class="token keyword">let</span> <span class="token punctuation">{</span> parse <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;@babel/parser&quot;</span><span class="token punctuation">)</span>

<span class="token keyword">let</span> generate <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;@babel/generator&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>default

<span class="token keyword">const</span> code <span class="token operator">=</span> <span class="token string">&#39;class Example {}&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> ast <span class="token operator">=</span> <span class="token function">parse</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> output <span class="token operator">=</span> <span class="token function">generate</span><span class="token punctuation">(</span>ast<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token comment">/* options */</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="\u8F6C\u6362" tabindex="-1">\u8F6C\u6362 <a class="header-anchor" href="#\u8F6C\u6362" aria-hidden="true">#</a></h3><div class="language-js"><pre><code><span class="token keyword">let</span> <span class="token punctuation">{</span> parse <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;@babel/parser&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> traverse <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;@babel/traverse&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>default<span class="token punctuation">;</span>

<span class="token keyword">const</span> code <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">function square(n) {
  return n * n;
}</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>

<span class="token keyword">const</span> ast <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">traverse</span><span class="token punctuation">(</span>ast<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token function">enter</span><span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">isIdentifier</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;n&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      path<span class="token punctuation">.</span>node<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;x&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>\u6211\u4EEC\u628A\u4E0A\u8FF0\u4E09\u4E2A\u8FC7\u7A0B\u7EC4\u5408\u4E00\u4E0B</p><div class="language-js"><pre><code><span class="token keyword">let</span> <span class="token punctuation">{</span> parse <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;@babel/parser&quot;</span><span class="token punctuation">)</span>

<span class="token keyword">let</span> generate <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;@babel/generator&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>default

<span class="token keyword">const</span> traverse <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;@babel/traverse&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>default<span class="token punctuation">;</span>

<span class="token keyword">const</span> code <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">function square(n) {
    return n * n;
  }</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>

<span class="token keyword">const</span> ast <span class="token operator">=</span> <span class="token function">parse</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// \u4FEE\u6539AST</span>

<span class="token function">traverse</span><span class="token punctuation">(</span>ast<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token function">enter</span><span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">isIdentifier</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;n&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        path<span class="token punctuation">.</span>node<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;x&quot;</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> output <span class="token operator">=</span> <span class="token function">generate</span><span class="token punctuation">(</span>ast<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token comment">/* options */</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="\u8F6C\u6362\u51FD\u6570\u4F7F\u7528\u6CE8\u610F\u70B9" tabindex="-1">\u8F6C\u6362\u51FD\u6570\u4F7F\u7528\u6CE8\u610F\u70B9 <a class="header-anchor" href="#\u8F6C\u6362\u51FD\u6570\u4F7F\u7528\u6CE8\u610F\u70B9" aria-hidden="true">#</a></h3><ul><li>traverse\u4F7F\u7528\u7684\u662F\u6DF1\u5EA6\u904D\u5386\u6811\u7684\u5B9E\u73B0</li></ul><h3 id="ast\u5BF9\u6BD4\u5DE5\u5177" tabindex="-1">AST\u5BF9\u6BD4\u5DE5\u5177 <a class="header-anchor" href="#ast\u5BF9\u6BD4\u5DE5\u5177" aria-hidden="true">#</a></h3><p><a href="https://astexplorer.net/" target="_blank" rel="noopener noreferrer">AST\u53EF\u89C6\u5316</a></p><h2 id="recast" tabindex="-1">recast <a class="header-anchor" href="#recast" aria-hidden="true">#</a></h2><p><code>recast</code>\u80FD\u591F\u751F\u6210<code>diff</code>\u66F4\u53CB\u597D\u7684\u6E90\u7801,\u5176\u6574\u4F53\u4F7F\u7528\u5982\u4E0B\uFF1A</p><div class="language-js"><pre><code><span class="token keyword">const</span> <span class="token punctuation">{</span> parse<span class="token punctuation">,</span> print<span class="token punctuation">,</span>visit <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;recast&#39;</span><span class="token punctuation">)</span>

module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">visitor</span><span class="token punctuation">(</span><span class="token parameter">code<span class="token punctuation">,</span> visitor</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// code -&gt; ast</span>
    <span class="token keyword">const</span> ast <span class="token operator">=</span> <span class="token function">parse</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span>
    <span class="token function">visit</span><span class="token punctuation">(</span>ast<span class="token punctuation">,</span> visitor<span class="token punctuation">)</span>
    <span class="token comment">// ast -&gt; code</span>
    <span class="token keyword">return</span> <span class="token function">print</span><span class="token punctuation">(</span>ast<span class="token punctuation">)</span><span class="token punctuation">.</span>code
<span class="token punctuation">}</span>


<span class="token keyword">const</span> visitor <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./core&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> recast <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;recast&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> t <span class="token operator">=</span> recast<span class="token punctuation">.</span>types<span class="token punctuation">.</span>namedTypes
<span class="token keyword">const</span> <span class="token punctuation">{</span> arrowFunctionExpression<span class="token punctuation">,</span> blockStatement<span class="token punctuation">,</span>variableDeclaration<span class="token punctuation">,</span>variableDeclarator <span class="token punctuation">}</span> <span class="token operator">=</span>  recast<span class="token punctuation">.</span>types<span class="token punctuation">.</span>builders
<span class="token keyword">const</span> code <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">function a (a, b) {
    return a + b
}</span><span class="token template-punctuation string">\`</span></span>
<span class="token keyword">const</span> result <span class="token operator">=</span>  <span class="token function">visitor</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token function">visitFunctionDeclaration</span><span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u53C2\u6570</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> params<span class="token punctuation">,</span> body<span class="token punctuation">,</span> id <span class="token punctuation">}</span>  <span class="token operator">=</span> path<span class="token punctuation">.</span>node

    <span class="token keyword">const</span> exp <span class="token operator">=</span> <span class="token function">variableDeclaration</span><span class="token punctuation">(</span><span class="token string">&#39;const&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
      <span class="token function">variableDeclarator</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span><span class="token function">arrowFunctionExpression</span><span class="token punctuation">(</span>params<span class="token punctuation">,</span> body<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">]</span><span class="token punctuation">)</span>

    path<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>exp<span class="token punctuation">)</span> 
    
    <span class="token keyword">return</span> <span class="token boolean">false</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>

</code></pre></div>`,25),e=[o];function c(u,l,i,r,k,d){return a(),s("div",null,e)}var f=n(p,[["render",c]]);export{g as __pageData,f as default};
